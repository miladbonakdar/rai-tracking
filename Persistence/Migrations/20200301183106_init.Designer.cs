// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200301183106_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<string>("AdminType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("AdminType.Agent");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Telephone")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Domain.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedById")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepoId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedById")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepoId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Domain.AgentEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedById")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsValidLocation")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedById")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("AgentEvent");
                });

            modelBuilder.Entity("Domain.Command", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<string>("CommandData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedById")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedById")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("Domain.Depo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedById")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("StationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedById")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StationId");

                    b.ToTable("Depos");
                });

            modelBuilder.Entity("Domain.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer");

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedById")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("OTDR")
                        .HasColumnType("integer");

                    b.Property<int>("Phase")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingTime")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StationOneId")
                        .HasColumnType("integer");

                    b.Property<int?>("StationTwoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedById")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("AgentId");

                    b.HasIndex("StationOneId");

                    b.HasIndex("StationTwoId");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Domain.MissionEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedById")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsValidLocation")
                        .HasColumnType("boolean");

                    b.Property<int>("MissionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Seen")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedById")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("MissionId");

                    b.ToTable("MissionEvent");
                });

            modelBuilder.Entity("Domain.MissionLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedById")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MissionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedById")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MissionId");

                    b.ToTable("MissionLocation");
                });

            modelBuilder.Entity("Domain.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "000",
                            IsAdmin = true,
                            Name = "ستاد"
                        },
                        new
                        {
                            Id = 2,
                            Code = "999",
                            IsAdmin = false,
                            Name = "نامعلوم"
                        },
                        new
                        {
                            Id = 8,
                            Code = "039",
                            IsAdmin = false,
                            Name = "آذربایجان"
                        },
                        new
                        {
                            Id = 9,
                            Code = "040",
                            IsAdmin = false,
                            Name = "اراک"
                        },
                        new
                        {
                            Id = 10,
                            Code = "043",
                            IsAdmin = false,
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = 11,
                            Code = "034",
                            IsAdmin = false,
                            Name = "تهران"
                        },
                        new
                        {
                            Id = 12,
                            Code = "137",
                            IsAdmin = false,
                            Name = "قم"
                        },
                        new
                        {
                            Id = 13,
                            Code = "042",
                            IsAdmin = false,
                            Name = "جنوب"
                        },
                        new
                        {
                            Id = 14,
                            Code = "044",
                            IsAdmin = false,
                            Name = "یزد"
                        },
                        new
                        {
                            Id = 15,
                            Code = "037",
                            IsAdmin = false,
                            Name = "خراسان"
                        },
                        new
                        {
                            Id = 16,
                            Code = "057",
                            IsAdmin = false,
                            Name = "کرمان"
                        },
                        new
                        {
                            Id = 17,
                            Code = "132",
                            IsAdmin = false,
                            Name = "جنوب شرق"
                        },
                        new
                        {
                            Id = 18,
                            Code = "036",
                            IsAdmin = false,
                            Name = "شمال شرق 1"
                        },
                        new
                        {
                            Id = 19,
                            Code = "035",
                            IsAdmin = false,
                            Name = "شمال"
                        },
                        new
                        {
                            Id = 20,
                            Code = "038",
                            IsAdmin = false,
                            Name = "شمال غرب"
                        },
                        new
                        {
                            Id = 21,
                            Code = "136",
                            IsAdmin = false,
                            Name = "لرستان"
                        },
                        new
                        {
                            Id = 22,
                            Code = "041",
                            IsAdmin = false,
                            Name = "زاگرس"
                        },
                        new
                        {
                            Id = 23,
                            Code = "045",
                            IsAdmin = false,
                            Name = "هرمزگان"
                        },
                        new
                        {
                            Id = 24,
                            Code = "047",
                            IsAdmin = false,
                            Name = "شرق"
                        },
                        new
                        {
                            Id = 25,
                            Code = "058",
                            IsAdmin = false,
                            Name = "فارس"
                        },
                        new
                        {
                            Id = 26,
                            Code = "138",
                            IsAdmin = false,
                            Name = "شمال شرق 2"
                        });
                });

            modelBuilder.Entity("Domain.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("PostStationId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreStationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Domain.Admin", b =>
                {
                    b.HasOne("Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.PersonName", "PersonName", b1 =>
                        {
                            b1.Property<int>("AdminId")
                                .HasColumnType("integer");

                            b1.Property<string>("Firstname")
                                .HasColumnType("character varying(200)")
                                .HasMaxLength(200);

                            b1.Property<string>("Lastname")
                                .HasColumnType("character varying(200)")
                                .HasMaxLength(200);

                            b1.HasKey("AdminId");

                            b1.ToTable("Admins");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });
                });

            modelBuilder.Entity("Domain.Agent", b =>
                {
                    b.HasOne("Domain.Depo", "Depo")
                        .WithMany("Agents")
                        .HasForeignKey("DepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.AgentInfo", "AgentInfo", b1 =>
                        {
                            b1.Property<int>("AgentId")
                                .HasColumnType("integer");

                            b1.Property<int>("Battery")
                                .HasColumnType("integer");

                            b1.Property<bool>("IsGpsOn")
                                .HasColumnType("boolean");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AgentId");

                            b1.ToTable("Agents");

                            b1.WithOwner()
                                .HasForeignKey("AgentId");
                        });

                    b.OwnsOne("Domain.ValueObjects.AgentSetting", "AgentSetting", b1 =>
                        {
                            b1.Property<int>("AgentId")
                                .HasColumnType("integer");

                            b1.Property<int>("Version")
                                .HasColumnType("integer");

                            b1.HasKey("AgentId");

                            b1.ToTable("Agents");

                            b1.WithOwner()
                                .HasForeignKey("AgentId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Location", "LastLocation", b1 =>
                        {
                            b1.Property<int>("AgentId")
                                .HasColumnType("integer");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("AgentId");

                            b1.ToTable("Agents");

                            b1.WithOwner()
                                .HasForeignKey("AgentId");
                        });

                    b.OwnsOne("Domain.ValueObjects.PersonName", "PersonName", b1 =>
                        {
                            b1.Property<int>("AgentId")
                                .HasColumnType("integer");

                            b1.Property<string>("Firstname")
                                .HasColumnType("character varying(200)")
                                .HasMaxLength(200);

                            b1.Property<string>("Lastname")
                                .HasColumnType("character varying(200)")
                                .HasMaxLength(200);

                            b1.HasKey("AgentId");

                            b1.ToTable("Agents");

                            b1.WithOwner()
                                .HasForeignKey("AgentId");
                        });
                });

            modelBuilder.Entity("Domain.AgentEvent", b =>
                {
                    b.HasOne("Domain.Agent", "Agent")
                        .WithMany("Events")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Location", "AgentLocation", b1 =>
                        {
                            b1.Property<int>("AgentEventId")
                                .HasColumnType("integer");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("AgentEventId");

                            b1.ToTable("AgentEvent");

                            b1.WithOwner()
                                .HasForeignKey("AgentEventId");
                        });
                });

            modelBuilder.Entity("Domain.Command", b =>
                {
                    b.HasOne("Domain.Agent", "Agent")
                        .WithMany("Commands")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Depo", b =>
                {
                    b.HasOne("Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<int>("DepoId")
                                .HasColumnType("integer");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("DepoId");

                            b1.ToTable("Depos");

                            b1.WithOwner()
                                .HasForeignKey("DepoId");
                        });
                });

            modelBuilder.Entity("Domain.Mission", b =>
                {
                    b.HasOne("Domain.Admin", null)
                        .WithMany("Missions")
                        .HasForeignKey("AdminId");

                    b.HasOne("Domain.Agent", "Agent")
                        .WithMany("Missions")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Station", "StationOne")
                        .WithMany()
                        .HasForeignKey("StationOneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Station", "StationTwo")
                        .WithMany()
                        .HasForeignKey("StationTwoId");

                    b.OwnsOne("Domain.ValueObjects.Location", "FailureLocation", b1 =>
                        {
                            b1.Property<int>("MissionId")
                                .HasColumnType("integer");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("MissionId");

                            b1.ToTable("Missions");

                            b1.WithOwner()
                                .HasForeignKey("MissionId");
                        });
                });

            modelBuilder.Entity("Domain.MissionEvent", b =>
                {
                    b.HasOne("Domain.Agent", "Agent")
                        .WithMany("MissionEvents")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Mission", "Mission")
                        .WithMany("Events")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Location", "AgentLocation", b1 =>
                        {
                            b1.Property<int>("MissionEventId")
                                .HasColumnType("integer");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("MissionEventId");

                            b1.ToTable("MissionEvent");

                            b1.WithOwner()
                                .HasForeignKey("MissionEventId");
                        });
                });

            modelBuilder.Entity("Domain.MissionLocation", b =>
                {
                    b.HasOne("Domain.Mission", "Mission")
                        .WithMany("Locations")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<int>("MissionLocationId")
                                .HasColumnType("integer");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("MissionLocationId");

                            b1.ToTable("MissionLocation");

                            b1.WithOwner()
                                .HasForeignKey("MissionLocationId");
                        });
                });

            modelBuilder.Entity("Domain.Organization", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<int>("OrganizationId")
                                .HasColumnType("integer");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });
                });

            modelBuilder.Entity("Domain.Station", b =>
                {
                    b.HasOne("Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
